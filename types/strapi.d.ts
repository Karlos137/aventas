/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/articles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/articles']
    put?: never
    post: operations['post/articles']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/articles/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/articles/{id}']
    put: operations['put/articles/{id}']
    post?: never
    delete: operations['delete/articles/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/articles/{id}/localizations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['post/articles/{id}/localizations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/collaborating-subjects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/collaborating-subjects']
    put?: never
    post: operations['post/collaborating-subjects']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/collaborating-subjects/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/collaborating-subjects/{id}']
    put: operations['put/collaborating-subjects/{id}']
    post?: never
    delete: operations['delete/collaborating-subjects/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/collaborating-subjects/{id}/localizations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['post/collaborating-subjects/{id}/localizations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/homepage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/homepage']
    put: operations['put/homepage']
    post?: never
    delete: operations['delete/homepage']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/homepage/localizations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['post/homepage/localizations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/references': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/references']
    put?: never
    post: operations['post/references']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/references/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/references/{id}']
    put: operations['put/references/{id}']
    post?: never
    delete: operations['delete/references/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/references/{id}/localizations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['post/references/{id}/localizations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/specializations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/specializations']
    put?: never
    post: operations['post/specializations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/specializations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/specializations/{id}']
    put: operations['put/specializations/{id}']
    post?: never
    delete: operations['delete/specializations/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/specializations/{id}/localizations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['post/specializations/{id}/localizations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/team-members': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/team-members']
    put?: never
    post: operations['post/team-members']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/team-members/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/team-members/{id}']
    put: operations['put/team-members/{id}']
    post?: never
    delete: operations['delete/team-members/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/team-members/{id}/localizations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['post/team-members/{id}/localizations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Upload files */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Upload files */
      requestBody: {
        content: {
          'multipart/form-data': {
            /** @description The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). */
            path?: string
            /** @description The ID of the entry which the file(s) will be linked to */
            refId?: string
            /** @description The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant). */
            ref?: string
            /** @description The field of the entry which the file(s) will be precisely linked to. */
            field?: string
            files: string[]
          }
        }
      }
      responses: {
        /** @description response */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile'][]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload?id={id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Upload file information */
    post: {
      parameters: {
        query: {
          /** @description File id */
          id: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Upload files */
      requestBody: {
        content: {
          'multipart/form-data': {
            fileInfo?: {
              name?: string
              alternativeText?: string
              caption?: string
            }
            /** Format: binary */
            files?: string
          }
        }
      }
      responses: {
        /** @description response */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile'][]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload/files': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Get a list of files */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile'][]
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload/files/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Get a specific file */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile']
          }
        }
      }
    }
    put?: never
    post?: never
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Delete a file */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/connect/{provider}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Login with a provider
     * @description Redirects to provider login before being redirect to /auth/{provider}/callback
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Provider name */
          provider: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Redirect response */
        301: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/local': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Local login
     * @description Returns a jwt token and user info
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "identifier": "foobar",
           *       "password": "Test1234"
           *     } */
          'application/json': {
            identifier?: string
            password?: string
          }
        }
      }
      responses: {
        /** @description Connection */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/local/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register a user
     * @description Returns a jwt token and user info
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "username": "foobar",
           *       "email": "foo.bar@strapi.io",
           *       "password": "Test1234"
           *     } */
          'application/json': {
            username?: string
            email?: string
            password?: string
          }
        }
      }
      responses: {
        /** @description Successful registration */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/{provider}/callback': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Default Callback from provider auth */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Provider name */
          provider: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/forgot-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send rest password email */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "email": "foo.bar@strapi.io"
           *     } */
          'application/json': {
            email?: string
          }
        }
      }
      responses: {
        /** @description Returns ok */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/reset-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Rest user password */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "password": "Test1234",
           *       "passwordConfirmation": "Test1234",
           *       "code": "zertyoaizndoianzodianzdonaizdoinaozdnia"
           *     } */
          'application/json': {
            password?: string
            passwordConfirmation?: string
            code?: string
          }
        }
      }
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/change-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Update user's own password */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            password: string
            currentPassword: string
            passwordConfirmation: string
          }
        }
      }
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/email-confirmation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Confirm user email */
    get: {
      parameters: {
        query?: {
          /** @description confirmation token received by email */
          confirmation?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Redirects to the configure email confirmation redirect url */
        301: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/send-email-confirmation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send confirmation email */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            email?: string
          }
        }
      }
      responses: {
        /** @description Returns email and boolean to confirm email was sent */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              email?: string
              /** @enum {string} */
              sent?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get default generated permissions */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns the permissions tree */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              permissions?: components['schemas']['Users-Permissions-PermissionsTree']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List roles */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns list of roles */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              roles?: (components['schemas']['Users-Permissions-Role'] & {
                nb_users?: number
              })[]
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    /** Create a role */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: components['requestBodies']['Users-Permissions-RoleRequest']
      responses: {
        /** @description Returns ok if the role was create */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/roles/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a role */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description role Id */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns the role */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              role?: components['schemas']['Users-Permissions-Role']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/roles/{role}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update a role */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description role Id */
          role: string
        }
        cookie?: never
      }
      requestBody: components['requestBodies']['Users-Permissions-RoleRequest']
      responses: {
        /** @description Returns ok if the role was udpated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    post?: never
    /** Delete a role */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description role Id */
          role: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns ok if the role was delete */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get list of users */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns an array of users */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User'][]
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    /** Create a user */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "username": "foo",
           *       "email": "foo@strapi.io",
           *       "password": "foo-password"
           *     } */
          'application/json': {
            email: string
            username: string
            password: string
          }
        }
      }
      responses: {
        /** @description Returns created user info */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User'] & {
              role?: components['schemas']['Users-Permissions-Role']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a user */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description user Id */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns a user */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    /** Update a user */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description user Id */
          id: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "username": "foo",
           *       "email": "foo@strapi.io",
           *       "password": "foo-password"
           *     } */
          'application/json': {
            email: string
            username: string
            password: string
          }
        }
      }
      responses: {
        /** @description Returns updated user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User'] & {
              role?: components['schemas']['Users-Permissions-Role']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    post?: never
    /** Delete a user */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description user Id */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns deleted user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get authenticated user info */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get user count */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns a number */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': number
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Error: {
      data?: (Record<string, never> | Record<string, never>[]) | null
      error: {
        status?: number
        name?: string
        message?: string
        details?: Record<string, never>
      }
    }
    ArticleLocalizationRequest: {
      heading: string
      perex: string
      content: string
      locale: string
    }
    ArticleRequest: {
      data: {
        heading: string
        perex: string
        content: string
        locale?: string
      }
    }
    ArticleResponseDataObjectLocalized: {
      id?: number
      attributes?: components['schemas']['Article']
    }
    ArticleLocalizationResponse: {
      data?: components['schemas']['ArticleResponseDataObjectLocalized']
      meta?: Record<string, never>
    }
    ArticleListResponseDataItemLocalized: {
      id?: number
      attributes?: components['schemas']['Article']
    }
    ArticleLocalizationListResponse: {
      data?: components['schemas']['ArticleListResponseDataItemLocalized'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    ArticleListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['Article']
    }
    ArticleListResponse: {
      data?: components['schemas']['ArticleListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    Article: {
      heading: string
      perex: string
      content: string
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: {
            firstname?: string
            lastname?: string
            username?: string
            /** Format: email */
            email?: string
            resetPasswordToken?: string
            registrationToken?: string
            isActive?: boolean
            roles?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  code?: string
                  description?: string
                  users?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  permissions?: {
                    data?: {
                      id?: number
                      attributes?: {
                        action?: string
                        actionParameters?: unknown
                        subject?: string
                        properties?: unknown
                        conditions?: unknown
                        role?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }[]
                  }
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }[]
            }
            blocked?: boolean
            preferedLanguage?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      localizations?: {
        data?: components['schemas']['ArticleListResponseDataItemLocalized'][]
      }
      locale?: string
    }
    ArticleResponseDataObject: {
      id?: number
      attributes?: components['schemas']['Article']
    }
    ArticleResponse: {
      data?: components['schemas']['ArticleResponseDataObject']
      meta?: Record<string, never>
    }
    CollaboratingSubjectLocalizationRequest: {
      href: string
      /** @example string or id */
      logo: number | string
      locale: string
    }
    CollaboratingSubjectRequest: {
      data: {
        href: string
        /** @example string or id */
        logo: number | string
        locale?: string
      }
    }
    CollaboratingSubjectResponseDataObjectLocalized: {
      id?: number
      attributes?: components['schemas']['CollaboratingSubject']
    }
    CollaboratingSubjectLocalizationResponse: {
      data?: components['schemas']['CollaboratingSubjectResponseDataObjectLocalized']
      meta?: Record<string, never>
    }
    CollaboratingSubjectListResponseDataItemLocalized: {
      id?: number
      attributes?: components['schemas']['CollaboratingSubject']
    }
    CollaboratingSubjectLocalizationListResponse: {
      data?: components['schemas']['CollaboratingSubjectListResponseDataItemLocalized'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    CollaboratingSubjectListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['CollaboratingSubject']
    }
    CollaboratingSubjectListResponse: {
      data?: components['schemas']['CollaboratingSubjectListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    CollaboratingSubject: {
      href: string
      logo: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            alternativeText?: string
            caption?: string
            width?: number
            height?: number
            formats?: unknown
            hash?: string
            ext?: string
            mime?: string
            /** Format: float */
            size?: number
            url?: string
            previewUrl?: string
            provider?: string
            provider_metadata?: unknown
            related?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }[]
            }
            folder?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  pathId?: number
                  parent?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  children?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  files?: {
                    data?: {
                      id?: number
                      attributes?: {
                        name?: string
                        alternativeText?: string
                        caption?: string
                        width?: number
                        height?: number
                        formats?: unknown
                        hash?: string
                        ext?: string
                        mime?: string
                        /** Format: float */
                        size?: number
                        url?: string
                        previewUrl?: string
                        provider?: string
                        provider_metadata?: unknown
                        related?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }[]
                        }
                        folder?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        folderPath?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: {
                              firstname?: string
                              lastname?: string
                              username?: string
                              /** Format: email */
                              email?: string
                              resetPasswordToken?: string
                              registrationToken?: string
                              isActive?: boolean
                              roles?: {
                                data?: {
                                  id?: number
                                  attributes?: {
                                    name?: string
                                    code?: string
                                    description?: string
                                    users?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }[]
                                    }
                                    permissions?: {
                                      data?: {
                                        id?: number
                                        attributes?: {
                                          action?: string
                                          actionParameters?: unknown
                                          subject?: string
                                          properties?: unknown
                                          conditions?: unknown
                                          role?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                          /** Format: date-time */
                                          createdAt?: string
                                          /** Format: date-time */
                                          updatedAt?: string
                                          createdBy?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                          updatedBy?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                        }
                                      }[]
                                    }
                                    /** Format: date-time */
                                    createdAt?: string
                                    /** Format: date-time */
                                    updatedAt?: string
                                    createdBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    updatedBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                  }
                                }[]
                              }
                              blocked?: boolean
                              preferedLanguage?: string
                              /** Format: date-time */
                              createdAt?: string
                              /** Format: date-time */
                              updatedAt?: string
                              createdBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                              updatedBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                            }
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }[]
                  }
                  path?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            folderPath?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      localizations?: {
        data?: components['schemas']['CollaboratingSubjectListResponseDataItemLocalized'][]
      }
      locale?: string
    }
    CollaboratingSubjectResponseDataObject: {
      id?: number
      attributes?: components['schemas']['CollaboratingSubject']
    }
    CollaboratingSubjectResponse: {
      data?: components['schemas']['CollaboratingSubjectResponseDataObject']
      meta?: Record<string, never>
    }
    HomepageLocalizationRequest: {
      hero: components['schemas']['HomepageHeroComponent']
      about: components['schemas']['HomepageAboutComponent']
      specializations: components['schemas']['HomepageSpecializationsComponent']
      ourTeam: components['schemas']['HomepageOurTeamComponent']
      collaboratingSubjects: components['schemas']['HomepageCollaboratingSubjectsComponent']
      references: components['schemas']['HomepageReferencesComponent']
      contact: components['schemas']['HomepageContactComponent']
      articles: components['schemas']['HomepageArticlesComponent']
      locale: string
    }
    HomepageRequest: {
      data: {
        hero: components['schemas']['HomepageHeroComponent']
        about: components['schemas']['HomepageAboutComponent']
        specializations: components['schemas']['HomepageSpecializationsComponent']
        ourTeam: components['schemas']['HomepageOurTeamComponent']
        collaboratingSubjects: components['schemas']['HomepageCollaboratingSubjectsComponent']
        references: components['schemas']['HomepageReferencesComponent']
        contact: components['schemas']['HomepageContactComponent']
        articles: components['schemas']['HomepageArticlesComponent']
        locale?: string
      }
    }
    HomepageResponseDataObjectLocalized: {
      id?: number
      attributes?: components['schemas']['Homepage']
    }
    HomepageLocalizationResponse: {
      data?: components['schemas']['HomepageResponseDataObjectLocalized']
      meta?: Record<string, never>
    }
    HomepageListResponseDataItemLocalized: {
      id?: number
      attributes?: components['schemas']['Homepage']
    }
    HomepageLocalizationListResponse: {
      data?: components['schemas']['HomepageListResponseDataItemLocalized'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    HomepageListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['Homepage']
    }
    HomepageListResponse: {
      data?: components['schemas']['HomepageListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    Homepage: {
      hero: components['schemas']['HomepageHeroComponent']
      about: components['schemas']['HomepageAboutComponent']
      specializations: components['schemas']['HomepageSpecializationsComponent']
      ourTeam: components['schemas']['HomepageOurTeamComponent']
      collaboratingSubjects: components['schemas']['HomepageCollaboratingSubjectsComponent']
      references: components['schemas']['HomepageReferencesComponent']
      contact: components['schemas']['HomepageContactComponent']
      articles: components['schemas']['HomepageArticlesComponent']
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      localizations?: {
        data?: components['schemas']['HomepageListResponseDataItemLocalized'][]
      }
      locale?: string
    }
    HomepageResponseDataObject: {
      id?: number
      attributes?: components['schemas']['Homepage']
    }
    HomepageResponse: {
      data?: components['schemas']['HomepageResponseDataObject']
      meta?: Record<string, never>
    }
    HomepageHeroComponent: {
      id?: number
      text?: string
      image?: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            alternativeText?: string
            caption?: string
            width?: number
            height?: number
            formats?: unknown
            hash?: string
            ext?: string
            mime?: string
            /** Format: float */
            size?: number
            url?: string
            previewUrl?: string
            provider?: string
            provider_metadata?: unknown
            related?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }[]
            }
            folder?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  pathId?: number
                  parent?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  children?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  files?: {
                    data?: {
                      id?: number
                      attributes?: {
                        name?: string
                        alternativeText?: string
                        caption?: string
                        width?: number
                        height?: number
                        formats?: unknown
                        hash?: string
                        ext?: string
                        mime?: string
                        /** Format: float */
                        size?: number
                        url?: string
                        previewUrl?: string
                        provider?: string
                        provider_metadata?: unknown
                        related?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }[]
                        }
                        folder?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        folderPath?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: {
                              firstname?: string
                              lastname?: string
                              username?: string
                              /** Format: email */
                              email?: string
                              resetPasswordToken?: string
                              registrationToken?: string
                              isActive?: boolean
                              roles?: {
                                data?: {
                                  id?: number
                                  attributes?: {
                                    name?: string
                                    code?: string
                                    description?: string
                                    users?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }[]
                                    }
                                    permissions?: {
                                      data?: {
                                        id?: number
                                        attributes?: {
                                          action?: string
                                          actionParameters?: unknown
                                          subject?: string
                                          properties?: unknown
                                          conditions?: unknown
                                          role?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                          /** Format: date-time */
                                          createdAt?: string
                                          /** Format: date-time */
                                          updatedAt?: string
                                          createdBy?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                          updatedBy?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                        }
                                      }[]
                                    }
                                    /** Format: date-time */
                                    createdAt?: string
                                    /** Format: date-time */
                                    updatedAt?: string
                                    createdBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    updatedBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                  }
                                }[]
                              }
                              blocked?: boolean
                              preferedLanguage?: string
                              /** Format: date-time */
                              createdAt?: string
                              /** Format: date-time */
                              updatedAt?: string
                              createdBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                              updatedBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                            }
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }[]
                  }
                  path?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            folderPath?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
    }
    HomepageAboutComponent: {
      id?: number
      heading?: string
      description?: string
    }
    HomepageSpecializationsComponent: {
      id?: number
      heading?: string
    }
    HomepageOurTeamComponent: {
      id?: number
      heading?: string
    }
    HomepageCollaboratingSubjectsComponent: {
      id?: number
      heading?: string
    }
    HomepageReferencesComponent: {
      id?: number
      heading?: string
    }
    HomepageContactComponent: {
      id?: number
      heading?: string
      contactSection?: {
        id?: number
        email?: string
        phone?: string
        heading?: string
      }
      contactInfoSection?: {
        id?: number
        name?: string
        ico?: string
        dic?: string
        heading?: string
      }
      contactOfficeSection?: {
        id?: number
        name?: string
        href?: string
        heading?: string
      }
      linkedInLink?: string
      facebookLink?: string
    }
    HomepageArticlesComponent: {
      id?: number
      heading?: string
    }
    ReferenceLocalizationRequest: {
      href: string
      /** @example string or id */
      logo: number | string
      locale: string
    }
    ReferenceRequest: {
      data: {
        href: string
        /** @example string or id */
        logo: number | string
        locale?: string
      }
    }
    ReferenceResponseDataObjectLocalized: {
      id?: number
      attributes?: components['schemas']['Reference']
    }
    ReferenceLocalizationResponse: {
      data?: components['schemas']['ReferenceResponseDataObjectLocalized']
      meta?: Record<string, never>
    }
    ReferenceListResponseDataItemLocalized: {
      id?: number
      attributes?: components['schemas']['Reference']
    }
    ReferenceLocalizationListResponse: {
      data?: components['schemas']['ReferenceListResponseDataItemLocalized'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    ReferenceListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['Reference']
    }
    ReferenceListResponse: {
      data?: components['schemas']['ReferenceListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    Reference: {
      href: string
      logo: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            alternativeText?: string
            caption?: string
            width?: number
            height?: number
            formats?: unknown
            hash?: string
            ext?: string
            mime?: string
            /** Format: float */
            size?: number
            url?: string
            previewUrl?: string
            provider?: string
            provider_metadata?: unknown
            related?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }[]
            }
            folder?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  pathId?: number
                  parent?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  children?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  files?: {
                    data?: {
                      id?: number
                      attributes?: {
                        name?: string
                        alternativeText?: string
                        caption?: string
                        width?: number
                        height?: number
                        formats?: unknown
                        hash?: string
                        ext?: string
                        mime?: string
                        /** Format: float */
                        size?: number
                        url?: string
                        previewUrl?: string
                        provider?: string
                        provider_metadata?: unknown
                        related?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }[]
                        }
                        folder?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        folderPath?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: {
                              firstname?: string
                              lastname?: string
                              username?: string
                              /** Format: email */
                              email?: string
                              resetPasswordToken?: string
                              registrationToken?: string
                              isActive?: boolean
                              roles?: {
                                data?: {
                                  id?: number
                                  attributes?: {
                                    name?: string
                                    code?: string
                                    description?: string
                                    users?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }[]
                                    }
                                    permissions?: {
                                      data?: {
                                        id?: number
                                        attributes?: {
                                          action?: string
                                          actionParameters?: unknown
                                          subject?: string
                                          properties?: unknown
                                          conditions?: unknown
                                          role?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                          /** Format: date-time */
                                          createdAt?: string
                                          /** Format: date-time */
                                          updatedAt?: string
                                          createdBy?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                          updatedBy?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                        }
                                      }[]
                                    }
                                    /** Format: date-time */
                                    createdAt?: string
                                    /** Format: date-time */
                                    updatedAt?: string
                                    createdBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    updatedBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                  }
                                }[]
                              }
                              blocked?: boolean
                              preferedLanguage?: string
                              /** Format: date-time */
                              createdAt?: string
                              /** Format: date-time */
                              updatedAt?: string
                              createdBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                              updatedBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                            }
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }[]
                  }
                  path?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            folderPath?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      localizations?: {
        data?: components['schemas']['ReferenceListResponseDataItemLocalized'][]
      }
      locale?: string
    }
    ReferenceResponseDataObject: {
      id?: number
      attributes?: components['schemas']['Reference']
    }
    ReferenceResponse: {
      data?: components['schemas']['ReferenceResponseDataObject']
      meta?: Record<string, never>
    }
    SpecializationLocalizationRequest: {
      heading: string
      content: string
      locale: string
    }
    SpecializationRequest: {
      data: {
        heading: string
        content: string
        locale?: string
      }
    }
    SpecializationResponseDataObjectLocalized: {
      id?: number
      attributes?: components['schemas']['Specialization']
    }
    SpecializationLocalizationResponse: {
      data?: components['schemas']['SpecializationResponseDataObjectLocalized']
      meta?: Record<string, never>
    }
    SpecializationListResponseDataItemLocalized: {
      id?: number
      attributes?: components['schemas']['Specialization']
    }
    SpecializationLocalizationListResponse: {
      data?: components['schemas']['SpecializationListResponseDataItemLocalized'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    SpecializationListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['Specialization']
    }
    SpecializationListResponse: {
      data?: components['schemas']['SpecializationListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    Specialization: {
      heading: string
      content: string
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: {
            firstname?: string
            lastname?: string
            username?: string
            /** Format: email */
            email?: string
            resetPasswordToken?: string
            registrationToken?: string
            isActive?: boolean
            roles?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  code?: string
                  description?: string
                  users?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  permissions?: {
                    data?: {
                      id?: number
                      attributes?: {
                        action?: string
                        actionParameters?: unknown
                        subject?: string
                        properties?: unknown
                        conditions?: unknown
                        role?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }[]
                  }
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }[]
            }
            blocked?: boolean
            preferedLanguage?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      localizations?: {
        data?: components['schemas']['SpecializationListResponseDataItemLocalized'][]
      }
      locale?: string
    }
    SpecializationResponseDataObject: {
      id?: number
      attributes?: components['schemas']['Specialization']
    }
    SpecializationResponse: {
      data?: components['schemas']['SpecializationResponseDataObject']
      meta?: Record<string, never>
    }
    TeamMemberLocalizationRequest: {
      name: string
      position: string
      email?: string
      phone?: string
      about: string
      /** @example string or id */
      image: number | string
      locale: string
    }
    TeamMemberRequest: {
      data: {
        name: string
        position: string
        email?: string
        phone?: string
        about: string
        /** @example string or id */
        image: number | string
        locale?: string
      }
    }
    TeamMemberResponseDataObjectLocalized: {
      id?: number
      attributes?: components['schemas']['TeamMember']
    }
    TeamMemberLocalizationResponse: {
      data?: components['schemas']['TeamMemberResponseDataObjectLocalized']
      meta?: Record<string, never>
    }
    TeamMemberListResponseDataItemLocalized: {
      id?: number
      attributes?: components['schemas']['TeamMember']
    }
    TeamMemberLocalizationListResponse: {
      data?: components['schemas']['TeamMemberListResponseDataItemLocalized'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    TeamMemberListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['TeamMember']
    }
    TeamMemberListResponse: {
      data?: components['schemas']['TeamMemberListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    TeamMember: {
      name: string
      position: string
      email?: string
      phone?: string
      about: string
      image: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            alternativeText?: string
            caption?: string
            width?: number
            height?: number
            formats?: unknown
            hash?: string
            ext?: string
            mime?: string
            /** Format: float */
            size?: number
            url?: string
            previewUrl?: string
            provider?: string
            provider_metadata?: unknown
            related?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }[]
            }
            folder?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  pathId?: number
                  parent?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  children?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  files?: {
                    data?: {
                      id?: number
                      attributes?: {
                        name?: string
                        alternativeText?: string
                        caption?: string
                        width?: number
                        height?: number
                        formats?: unknown
                        hash?: string
                        ext?: string
                        mime?: string
                        /** Format: float */
                        size?: number
                        url?: string
                        previewUrl?: string
                        provider?: string
                        provider_metadata?: unknown
                        related?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }[]
                        }
                        folder?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        folderPath?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: {
                              firstname?: string
                              lastname?: string
                              username?: string
                              /** Format: email */
                              email?: string
                              resetPasswordToken?: string
                              registrationToken?: string
                              isActive?: boolean
                              roles?: {
                                data?: {
                                  id?: number
                                  attributes?: {
                                    name?: string
                                    code?: string
                                    description?: string
                                    users?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }[]
                                    }
                                    permissions?: {
                                      data?: {
                                        id?: number
                                        attributes?: {
                                          action?: string
                                          actionParameters?: unknown
                                          subject?: string
                                          properties?: unknown
                                          conditions?: unknown
                                          role?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                          /** Format: date-time */
                                          createdAt?: string
                                          /** Format: date-time */
                                          updatedAt?: string
                                          createdBy?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                          updatedBy?: {
                                            data?: {
                                              id?: number
                                              attributes?: Record<string, never>
                                            }
                                          }
                                        }
                                      }[]
                                    }
                                    /** Format: date-time */
                                    createdAt?: string
                                    /** Format: date-time */
                                    updatedAt?: string
                                    createdBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    updatedBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                  }
                                }[]
                              }
                              blocked?: boolean
                              preferedLanguage?: string
                              /** Format: date-time */
                              createdAt?: string
                              /** Format: date-time */
                              updatedAt?: string
                              createdBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                              updatedBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                            }
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }[]
                  }
                  path?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            folderPath?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      localizations?: {
        data?: components['schemas']['TeamMemberListResponseDataItemLocalized'][]
      }
      locale?: string
    }
    TeamMemberResponseDataObject: {
      id?: number
      attributes?: components['schemas']['TeamMember']
    }
    TeamMemberResponse: {
      data?: components['schemas']['TeamMemberResponseDataObject']
      meta?: Record<string, never>
    }
    UploadFile: {
      id?: number
      name?: string
      alternativeText?: string
      caption?: string
      /** Format: integer */
      width?: number
      /** Format: integer */
      height?: number
      formats?: number
      hash?: string
      ext?: string
      mime?: string
      /** Format: double */
      size?: number
      url?: string
      previewUrl?: string
      provider?: string
      provider_metadata?: Record<string, never>
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
    }
    'Users-Permissions-Role': {
      id?: number
      name?: string
      description?: string
      type?: string
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
    }
    'Users-Permissions-User': {
      /** @example 1 */
      id?: number
      /** @example foo.bar */
      username?: string
      /** @example foo.bar@strapi.io */
      email?: string
      /** @example local */
      provider?: string
      /** @example true */
      confirmed?: boolean
      /** @example false */
      blocked?: boolean
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.258Z
       */
      createdAt?: string
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.267Z
       */
      updatedAt?: string
    }
    'Users-Permissions-UserRegistration': {
      /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
      jwt?: string
      user?: components['schemas']['Users-Permissions-User']
    }
    'Users-Permissions-PermissionsTree': {
      [key: string]: {
        /** @description every controller of the api */
        controllers?: {
          [key: string]: {
            [key: string]: {
              enabled?: boolean
              policy?: string
            }
          }
        }
      }
    }
  }
  responses: never
  parameters: never
  requestBodies: {
    'Users-Permissions-RoleRequest': {
      content: {
        /** @example {
         *       "name": "foo",
         *       "description": "role foo",
         *       "permissions": {
         *         "api::content-type.content-type": {
         *           "controllers": {
         *             "controllerA": {
         *               "find": {
         *                 "enabled": true
         *               }
         *             }
         *           }
         *         }
         *       }
         *     } */
        'application/json': {
          name?: string
          description?: string
          type?: string
          permissions?: components['schemas']['Users-Permissions-PermissionsTree']
        }
      }
    }
  }
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  'get/articles': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ArticleListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/articles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ArticleRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ArticleResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/articles/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ArticleResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/articles/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ArticleRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ArticleResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/articles/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/articles/{id}/localizations': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ArticleLocalizationRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ArticleLocalizationResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/collaborating-subjects': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CollaboratingSubjectListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/collaborating-subjects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CollaboratingSubjectRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CollaboratingSubjectResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/collaborating-subjects/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CollaboratingSubjectResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/collaborating-subjects/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CollaboratingSubjectRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CollaboratingSubjectResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/collaborating-subjects/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/collaborating-subjects/{id}/localizations': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CollaboratingSubjectLocalizationRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CollaboratingSubjectLocalizationResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/homepage': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HomepageResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/homepage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HomepageRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HomepageResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/homepage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/homepage/localizations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HomepageLocalizationRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HomepageLocalizationResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/references': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/references': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferenceRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/references/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/references/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferenceRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/references/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/references/{id}/localizations': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferenceLocalizationRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceLocalizationResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/specializations': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpecializationListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/specializations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SpecializationRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpecializationResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/specializations/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpecializationResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/specializations/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SpecializationRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpecializationResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/specializations/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/specializations/{id}/localizations': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SpecializationLocalizationRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpecializationLocalizationResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/team-members': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamMemberListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/team-members': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamMemberRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamMemberResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/team-members/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamMemberResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/team-members/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamMemberRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamMemberResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/team-members/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/team-members/{id}/localizations': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamMemberLocalizationRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamMemberLocalizationResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
}
